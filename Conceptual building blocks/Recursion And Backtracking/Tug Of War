Question Link:-

https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/tug-of-war-official/ojquestion


Code:-


#include <bits/stdc++.h>
using namespace std;

 int mini = INT_MAX;
 string str = "";
void solve(vector<int>v, int vidx, vector<int>set1, vector<int>set2, int soset1, int soset2 ){
    
    if(vidx == v.size()){
        int delta = abs(soset1 - soset2);
        if(delta < mini){
            mini = delta;
            string s1 ="[" , s2="[";
            for(int i=0;i<set1.size()-1 ; i++){
                s1 = s1 + to_string(set1[i])+", ";
            }
            s1 = s1 + to_string(set1[set1.size()-1]) + "] ";
            
            for(int i=0;i<set2.size()-1 ; i++){
                s2 = s2 + to_string(set2[i])+", ";
            }
            s2 = s2 + to_string(set2[set2.size()-1]) + "] ";
            
            str = s1 + s2;
        }
        
        return;
    }
    
    if(set1.size() < (v.size()+1)/2){
        set1.push_back(v[vidx]);
        solve(v, vidx+1, set1, set2, soset1 + v[vidx], soset2);
        set1.pop_back();
    }
    
    
    if(set2.size() < (v.size()+1)/2){
        set2.push_back(v[vidx]);
        solve(v, vidx+1, set1, set2, soset1 , soset2 + v[vidx]);
        set2.pop_back();
    }
}


int main(){
	int n;
	cin >> n;
	vector<int>v(n);
	for (int i = 0; i < n; i++){
	    cin>>v[i];
	}
	
	vector<int>set1;
	vector<int>set2;
	solve(v, 0, set1, set2, 0, 0);
	cout<<str;
}
