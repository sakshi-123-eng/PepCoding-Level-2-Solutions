Question Link:-

https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/recursion-and-backtracking/solve-sudoku-official/ojquestion

Code:-


#include<bits/stdc++.h>
using namespace std;
void display(vector<vector<int>>board){
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            cout<<board[i][j]<<" ";
        }
        cout<<"\n";
    }
}

bool isValid(vector<vector<int>>&board, int x, int y , int val){
    for(int j=0;j<board.size();j++){
        if(board[x][j] == val){
            return false;
        }
    }
    for(int i=0;i<board.size();i++){
        if(board[i][y] == val){
            return false;
        }
    }
    
    int smi = x/3 * 3; // some matrix i
    int smj = y/3 * 3; // some matrix j
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[smi+i][smj+j]==val){
                return false;
            }
        }
        
    }
    return true;
    
}

void solveSudoku(vector<vector<int>>&board, int i, int j){
    
    if(i==board.size()){
        display(board);
        return;
    }
    
    int ni=0; // next i
    int nj =0; // next j
    
    if(j==board[0].size()-1){
        ni = i+1;
        nj = 0;
    }else{
        ni = i;
        nj = j+1;
    }
    
    if(board[i][j]!=0){
        solveSudoku(board, ni, nj);
    }else{
        for(int po=1;po<=9;po++){
            if(isValid(board, i, j, po)==true){
                board[i][j]=po;
                solveSudoku(board, ni , nj);
                board[i][j]=0;
            }
        }
    }
    
}


int main(){
    vector<vector<int>>arr(9,vector<int>(9));
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            cin>>arr[i][j];
        }
    }
    
    solveSudoku(arr, 0, 0);
    
      return 0;
    
}
